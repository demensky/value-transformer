import type {TestFn} from 'ava';
import anyTest from 'ava';

import {macroTransformation} from '../../../test-util/macro-transformation.js';

import {Float64Transformer} from './float64-transformer.js';

const test = anyTest as TestFn<Float64Transformer>;

test.beforeEach((t) => {
  t.context = new Float64Transformer();
});

test('-Infinity', macroTransformation, -Infinity, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff], '-Infinity', '-Infinity');

test('-Number.MAX_VALUE', macroTransformation, -Number.MAX_VALUE, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff],);

test('Number.MIN_SAFE_INTEGER', macroTransformation, Number.MIN_SAFE_INTEGER, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc3],);

test('-Number.MIN_VALUE', macroTransformation, -Number.MIN_VALUE, [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80],);

test('-0', macroTransformation, -0, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80],'-0',);

test('NaN', macroTransformation, NaN,  [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f],'NaN',);

test('0', macroTransformation, 0, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],);

test('Number.MIN_VALUE', macroTransformation, Number.MIN_VALUE, [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],);

test('Number.MAX_SAFE_INTEGER', macroTransformation, Number.MAX_SAFE_INTEGER, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x43],);

test('Number.MAX_VALUE', macroTransformation, Number.MAX_VALUE, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f],);

test('Infinity', macroTransformation, Infinity, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f], 'Infinity', 'Infinity');
